/*

    Sega Saturn USB flash cart ROM
    Copyright Â© 2012, 2015 Anders Montonen
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.

 */

#ifndef CPU_H_
#define CPU_H_

#include <stdint.h>

/* Serial Communication Interface */
#define SMR         (*(volatile uint8_t *)0xfffffe00)
    #define SMR_C_A     (1<<7)
    #define SMR_CHR     (1<<6)
    #define SMR_PE      (1<<5)
    #define SMR_O_E     (1<<4)
    #define SMR_STOP    (1<<3)
    #define SMR_MP      (1<<2)
    #define SMR_CKS1    (1<<1)
    #define SMR_CKS0    (1<<0)
#define BRR         (*(volatile uint8_t *)0xfffffe01)
#define SCR         (*(volatile uint8_t *)0xfffffe02)
    #define SCR_TIE     (1<<7)
    #define SCR_RIE     (1<<6)
    #define SCR_TE      (1<<5)
    #define SCR_RE      (1<<4)
    #define SCR_MPIE    (1<<3)
    #define SCR_TEIE    (1<<2)
    #define SCR_CKE1    (1<<1)
    #define SCR_CKE0    (1<<0)
#define TDR         (*(volatile uint8_t *)0xfffffe03)
#define SSR         (*(volatile uint8_t *)0xfffffe04)
    #define SSR_TDRE    (1<<7)
    #define SSR_RDRF    (1<<6)
    #define SSR_ORER    (1<<5)
    #define SSR_FER     (1<<4)
    #define SSR_PER     (1<<3)
    #define SSR_TEND    (1<<2)
    #define SSR_MPB     (1<<1)
    #define SSR_MPBT    (1<<0)
#define RDR         (*(volatile uint8_t *)0xfffffe05)

/* Free running timer */
#define TIER        (*(volatile uint8_t *)0xfffffe10)
    #define TIER_ICIE   (1<<7)
    #define TIER_OCIAE  (1<<3)
    #define TIER_OCIBE  (1<<2)
    #define TIER_OVIE   (1<<1)
#define FTCSR       (*(volatile uint8_t *)0xfffffe11)
    #define FTCSR_ICF   (1<<7)
    #define FTCSR_OCFA  (1<<3)
    #define FTCSR_OCFB  (1<<2)
    #define FTCSR_OVF   (1<<1)
    #define FTCSR_CCLRA (1<<0)
#define FRC         (*(volatile uint16_t*)0xfffffe12)
#define FRCH        (*(volatile uint8_t *)0xfffffe12)
#define FRCL        (*(volatile uint8_t *)0xfffffe13)
#define OCRA        (*(volatile uint16_t*)0xfffffe14)
#define OCRAH       (*(volatile uint8_t *)0xfffffe14)
#define OCRAL       (*(volatile uint8_t *)0xfffffe15)
#define OCRB        (*(volatile uint16_t*)0xfffffe14)
#define OCRBH       (*(volatile uint8_t *)0xfffffe14)
#define OCRBL       (*(volatile uint8_t *)0xfffffe15)
#define TCR         (*(volatile uint8_t *)0xfffffe16)
    #define TCR_IEDGA   (1<<7)
    #define TCR_CKS1    (1<<1)
    #define TCR_CKS0    (1<<0)
#define TOCR        (*(volatile uint8_t *)0xfffffe17)
    #define TOCR_OCRS   (1<<4)
    #define TOCR_OLVLA  (1<<1)
    #define TOCR_OLVLB  (1<<0)
#define FICR        (*(volatile uint16_t*)0xfffffe18)
#define FICRH       (*(volatile uint8_t *)0xfffffe18)
#define FICRL       (*(volatile uint8_t *)0xfffffe19)

/* Interrupt controller */
#define IPRB        (*(volatile uint16_t*)0xfffffe60)
    #define IPRB_SCIIP3 (1<<15)
    #define IPRB_SCIIP2 (1<<14)
    #define IPRB_SCIIP1 (1<<13)
    #define IPRB_SCIIP0 (1<<12)
    #define IPRB_FRTIP3 (1<<11)
    #define IPRB_FRTIP2 (1<<10)
    #define IPRB_FRTIP1 (1<<9)
    #define IPRB_FRTIP0 (1<<8)
#define VCRA        (*(volatile uint16_t*)0xfffffe62)
    #define VCRA_SERV6  (1<<14)
    #define VCRA_SERV5  (1<<13)
    #define VCRA_SERV4  (1<<12)
    #define VCRA_SERV3  (1<<11)
    #define VCRA_SERV2  (1<<10)
    #define VCRA_SERV1  (1<<9)
    #define VCRA_SERV0  (1<<8)
    #define VCRA_SRXV6  (1<<6)
    #define VCRA_SRXV5  (1<<5)
    #define VCRA_SRXV4  (1<<4)
    #define VCRA_SRXV3  (1<<3)
    #define VCRA_SRXV2  (1<<2)
    #define VCRA_SRXV1  (1<<1)
    #define VCRA_SRXV0  (1<<0)
#define VCRB        (*(volatile uint16_t*)0xfffffe64)
    #define VCRB_STXV6  (1<<14)
    #define VCRB_STXV5  (1<<13)
    #define VCRB_STXV4  (1<<12)
    #define VCRB_STXV3  (1<<11)
    #define VCRB_STXV2  (1<<10)
    #define VCRB_STXV1  (1<<9)
    #define VCRB_STXV0  (1<<8)
    #define VCRB_STEV6  (1<<6)
    #define VCRB_STEV5  (1<<5)
    #define VCRB_STEV4  (1<<4)
    #define VCRB_STEV3  (1<<3)
    #define VCRB_STEV2  (1<<2)
    #define VCRB_STEV1  (1<<1)
    #define VCRB_STEV0  (1<<0)
#define VCRC        (*(volatile uint16_t*)0xfffffe66)
    #define VCRC_FICV6  (1<<14)
    #define VCRC_FICV5  (1<<13)
    #define VCRC_FICV4  (1<<12)
    #define VCRC_FICV3  (1<<11)
    #define VCRC_FICV2  (1<<10)
    #define VCRC_FICV1  (1<<9)
    #define VCRC_FICV0  (1<<8)
    #define VCRC_FOCV6  (1<<6)
    #define VCRC_FOCV5  (1<<5)
    #define VCRC_FOCV4  (1<<4)
    #define VCRC_FOCV3  (1<<3)
    #define VCRC_FOCV2  (1<<2)
    #define VCRC_FOCV1  (1<<1)
    #define VCRC_FOCV0  (1<<0)
#define VCRD        (*(volatile uint16_t*)0xfffffe68)
    #define VCRD_FOVV6  (1<<14)
    #define VCRD_FOVV5  (1<<13)
    #define VCRD_FOVV4  (1<<12)
    #define VCRD_FOVV3  (1<<11)
    #define VCRD_FOVV2  (1<<10)
    #define VCRD_FOVV1  (1<<9)
    #define VCRD_FOVV0  (1<<8)
#define ICR         (*(volatile uint16_t*)0xfffffee0)
    #define ICR_NMIL    (1<<15)
    #define ICR_NMIE    (1<<8)
    #define ICR_VECMD   (1<<0)
#define IPRA        (*(volatile uint16_t*)0xfffffee2)
    #define IPRA_DIVUIP3    (1<<15)
    #define IPRA_DIVUIP2    (1<<14)
    #define IPRA_DIVUIP1    (1<<13)
    #define IPRA_DIVUIP0    (1<<12)
    #define IPRA_DMACIP3    (1<<11)
    #define IPRA_DMACIP2    (1<<10)
    #define IPRA_DMACIP1    (1<<9)
    #define IPRA_DMACIP0    (1<<8)
    #define IPRA_WDTIP3 (1<<7)
    #define IPRA_WDTIP2 (1<<6)
    #define IPRA_WDTIP1 (1<<5)
    #define IPRA_WDTIP0 (1<<4)
#define VCRWDT      (*(volatile uint16_t*)0xfffffee4)
    #define VCRWDT_WITV6    (1<<14)
    #define VCRWDT_WITV5    (1<<13)
    #define VCRWDT_WITV4    (1<<12)
    #define VCRWDT_WITV3    (1<<11)
    #define VCRWDT_WITV2    (1<<10)
    #define VCRWDT_WITV1    (1<<9)
    #define VCRWDT_WITV0    (1<<8)
    #define VCRWDT_BCMV6    (1<<6)
    #define VCRWDT_BCMV5    (1<<5)
    #define VCRWDT_BCMV4    (1<<4)
    #define VCRWDT_BCMV3    (1<<3)
    #define VCRWDT_BCMV2    (1<<2)
    #define VCRWDT_BCMV1    (1<<1)
    #define VCRWDT_BCMV0    (1<<0)
#define VCRDMA0     (*(volatile uint32_t*)0xffffffa0)
#define VCRDMA1     (*(volatile uint32_t*)0xffffffa8)

/* DMA controller */
#define DRCR0       (*(volatile uint8_t *)0xfffffe71)
#define DRCR1       (*(volatile uint8_t *)0xfffffe72)
    #define DRCR_RS1    (1<<1)
    #define DRCR_RS0    (1<<0)
#define SAR0        (*(volatile uint32_t*)0xffffff80)
#define SAR1        (*(volatile uint32_t*)0xffffff90)
#define DAR0        (*(volatile uint32_t*)0xffffff84)
#define DAR1        (*(volatile uint32_t*)0xffffff94)
#define TCR0        (*(volatile uint32_t*)0xffffff88)
#define TCR1        (*(volatile uint32_t*)0xffffff98)
#define CHCR0       (*(volatile uint32_t*)0xffffff8c)
#define CHCR1       (*(volatile uint32_t*)0xffffff9c)
    #define CHCR_DM1    (1<<15)
    #define CHCR_DM0    (1<<14)
    #define CHCR_SM1    (1<<13)
    #define CHCR_SM0    (1<<12)
    #define CHCR_TS1    (1<<11)
    #define CHCR_TS0    (1<<10)
    #define CHCR_AR     (1<<9)
    #define CHCR_AM     (1<<8)
    #define CHCR_AL     (1<<7)
    #define CHCR_DS     (1<<6)
    #define CHCR_DL     (1<<5)
    #define CHCR_TB     (1<<4)
    #define CRCR_TA     (1<<3)
    #define CHCR_IE     (1<<2)
    #define CHCR_TE     (1<<1)
    #define CHCR_DE     (1<<0)
#define VCRDMA0     (*(volatile uint32_t*)0xffffffa0)
#define VCRDMA1     (*(volatile uint32_t*)0xffffffa8)
#define DMAOR       (*(volatile uint32_t*)0xffffffb0)
    #define DMAOR_PR    (1<<3)
    #define DMAOR_AE    (1<<2)
    #define DMAOR_NMIF  (1<<1)
    #define DMAOR_DME   (1<<0)

/* Watchdog timer */
#define WTCSRW      (*(volatile uint16_t*)0xfffffe80)
#define WTCSRR      (*(volatile uint8_t *)0xfffffe80)
#define WTCNTR      (*(volatile uint8_t *)0xfffffe81)
#define RSTCSRW     (*(volatile uint16_t*)0xfffffe82)
#define RSTCSRR     (*(volatile uint8_t *)0xfffffe83)

/* Power control */
#define SBYCR       (*(volatile uint8_t *)0xfffffe91)

/* Cache */
#define CCR         (*(volatile uint8_t *)0xfffffe92)
    #define CCR_W1      (1<<7)
    #define CCR_W0      (1<<6)
    #define CCR_CP      (1<<4)
    #define CCR_TW      (1<<3)
    #define CCR_OD      (1<<2)
    #define CCR_ID      (1<<1)
    #define CCR_CE      (1<<0)
#define CDARRAY     (*(volatile uint32_t*)0xc0000000)
#define CAARRAY     (*(volatile uint32_t*)0x60000000)
#define PURGE(x)    do{ *(volatile uint8_t *)((int)(x)+0x40000000)=1; }while(0);

/* Division unit */
#define DVSR        (*(volatile uint32_t*)0xffffff00)
#define DVDNT       (*(volatile uint32_t*)0xffffff04)
#define DVCR        (*(volatile uint16_t*)0xffffff08)
#define VCRDIV      (*(volatile uint16_t*)0xffffff0c)
#define DVDNTH      (*(volatile uint32_t*)0xffffff10)
#define DVDNTL      (*(volatile uint32_t*)0xffffff14)

/* User break controller */
#define BARAH       (*(volatile uint16_t*)0xffffff40)
#define BARAL       (*(volatile uint16_t*)0xffffff42)
#define BAMRAH      (*(volatile uint16_t*)0xffffff44)
#define BAMRAL      (*(volatile uint16_t*)0xffffff46)
#define BBRA        (*(volatile uint32_t*)0xffffff48)
#define BARBH       (*(volatile uint16_t*)0xffffff60)
#define BARBL       (*(volatile uint16_t*)0xffffff62)
#define BAMRBH      (*(volatile uint16_t*)0xffffff64)
#define BAMRBL      (*(volatile uint16_t*)0xffffff66)
#define BBRB        (*(volatile uint16_t*)0xffffff68)
#define BDRBH       (*(volatile uint16_t*)0xffffff70)
#define BDRBL       (*(volatile uint16_t*)0xffffff72)
#define BDMRBH      (*(volatile uint16_t*)0xffffff74)
#define BDMRBL      (*(volatile uint16_t*)0xffffff76)
#define BRCR        (*(volatile uint16_t*)0xffffff78)

/* Bus state controller */
#define BCR1        (*(volatile uint16_t*)0xffffffe0)
#define BCR2        (*(volatile uint16_t*)0xffffffe4)
#define WCR         (*(volatile uint16_t*)0xffffffe8)
#define MCR         (*(volatile uint16_t*)0xffffffec)
#define RTCSR       (*(volatile uint16_t*)0xfffffff0)
#define RTCNT       (*(volatile uint16_t*)0xfffffff4)
#define RTCOR       (*(volatile uint16_t*)0xfffffff8)

/* Oscillator circuit */
#define FMR         (*(volatile uint8_t *)0xfffffe90)
    #define FMR_FR1     (1<<1)
    #define FMR_FR0     (1<<0)

#endif /* CPU_H_ */
